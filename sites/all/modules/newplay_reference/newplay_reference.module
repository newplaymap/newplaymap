<?php

/** 
 * Implementation of hook_menu().
 */
function newplay_reference_menu() {
  $items = array();
  $items['newplay_reference/play'] = array(
    'title' => 'New Play Map Reference Play Lookup',
    'page callback' => 'newplay_reference_play_contact_callback',
    'access arguments' => array('create organization content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}


/**
 * AJAX Callback for the Play field on Events
 * copied from newplay_reference_noderef_contact_callback()
 *
 * @param $play mixed
 *   If the play exists, this will be the play's nid.
 *   If the play doesn't yet exist, this will be the play's name.
 */
function newplay_reference_play_contact_callback($type, $play, $artist, $submit = 'false') {

  // What does this need to do?
    // If the play doesn't exist show a generative artist field (maybe this could happen in the autocomplete similar to the location)
    
    // Save the play (with all the new info down the chain)
    // Or maybe we can use newplay_reference_noderef_contact_callback() for most of this?


  // Get the current user
	global $user;
	$current_user_name = $user->name;
  
  // Clear out the bs
  $artist = ($artist == 'undefined') ? NULL : $artist;

	$play = html_entity_decode($play, ENT_QUOTES);

	// @TODO: If it's not numberic, it could be because the user typed the entire title of the play without selecting the autocomplete.
	// It should also check for matches here
  // $play_nid = is_numeric($play) ? $play : NULL;
  // use _nodereference_potential_references($field, $string = '', $match = 'contains', $ids = array(), $limit = NULL)
  // $reference = _nodereference_potential_references('field_related_play', $play);
  $play_field = content_fields('field_related_play', 'event');
  $play_potential_references = _nodereference_potential_references($play_field, $play, 'equals');
    
	if (is_numeric($play)) {
	  $play_nid = $play;
	} elseif (!empty($play_potential_references)) {
    $play_nid = key($play_potential_references);
	} else {
	  $play_nid = NULL;
	}
	
  $play_node = node_load($play_nid);

	$artist = html_entity_decode($artist, ENT_QUOTES);
	
  $artist_field = content_fields('field_artist', 'play');
  $artist_potential_references = _nodereference_potential_references($artist_field, $artist, 'equals');
	if (is_numeric($artist)) {
		$artist_nid = $artist;
	} else if (!empty($play_node) && is_numeric($play_node->field_artist[0]['nid'])) {
		$artist_nid = $play_node->field_artist[0]['nid'];
	} else if (!empty($artist_potential_references) && count($artist_potential_references) == 1) {
	  $artist_nid = key($artist_potential_references);
	} else {
	  $artist_nid = NULL;
	}
  $gen_artist_node = node_load($artist_nid);
  
  $node_data = array(
    'status' => 'failed',
    'contact_id' => $user_id,
    'ready_to_submit' => false,
  );

  if (empty($artist) && empty($gen_artist_node)) {
    $node_data['status'] = 'contact needed';
  } else {
    $node_data['ready_to_submit'] = true;
  }
  

	// Create the Generative Artist node if necessary
	// If $gen_artist_node is empty, then $artist is the title of the gen artist to be created
	if ($node_data['ready_to_submit'] === true && empty($gen_artist_node) && !empty($artist)) {
		$gen_artist_node = newplay_reference_create_node('artist', $artist);		
		$artist_nid = $gen_artist_node->nid;
	}

	// Create the Play node if necessary
  // If the node is ready to submit and we don't already have an node referenced
  if ($node_data['ready_to_submit'] === true && empty($play_node) && !empty($gen_artist_node) && !empty($artist_nid)) { 
		// This requires $gen_artist and $gen_artist_node to exist.
		$play_node = newplay_reference_create_node($type, $play);
		$play_node->field_artist[0]['nid'] = $artist_nid;
		node_save($play_node);
		if ($play_node->field_artist[0]['nid'] == $artist_nid) {
			$message = t('%name has been added as the artist for @node. If you would like to add more details, you can edit it <a href="@edit-link">here</a>.', array('%name' => $gen_artist_node->title, '@node' => $play_node->title, '@edit-link' => base_path() . 'node/' . $play_node->nid . '/edit'));
	    drupal_set_message($message);
	    
		}
  }

  echo drupal_json($node_data);
}

/**
 * Helper function to create node.
 */
function newplay_reference_create_node($type, $title) {
  global $user;
	// Make the referenced node
  $new_node = (object) NULL;
  $new_node->type = $type;
  $new_node->title = $title;
  $new_node->status = 1;
  $new_node->comment = 0;
  $new_node->promote = 0;
  $new_node->moderate = 0;
  $new_node->sticky = 0;
  // Set author
  $new_node->uid = $user->uid;
  
  node_save($new_node);

  if (!is_null($new_node) && $new_node->nid) {
    // Use the human readable name of the content type
    $message = t('@type %name has been created. If you would like to add more details, you can edit it <a href="@edit-link">here</a>.', array('%name' => $new_node->title, '@type' => node_get_types('name', $type), '@edit-link' => base_path() . 'node/' . $new_node->nid . '/edit'));
    drupal_set_message($message);
  }
	return $new_node;
}


/**
 * Implementation of hook_form_alter.
 */
function newplay_reference_form_alter(&$form, $form_state, $form_id) {
  // Remove all preview buttons
  unset($form['buttons']['preview']);
  
  // Prepopulate the venue address based on the node reference
  // if the node reference is prepopulated using nodereference_url module
  if ($form_id == 'event_node_form' && isset($form['field_related_theater'][0]['nid']['#default_value'])) {
    $related_theater = node_load($form['field_related_theater'][0]['nid']['#default_value']);
    
    $form['field_location'][0]['#default_value']['street'] = $related_theater->field_location[0]['street'];
    $form['field_location'][0]['#default_value']['city'] = $related_theater->field_location[0]['city'];
    $form['field_location'][0]['#default_value']['province'] = $related_theater->field_location[0]['province_name'];
    $form['field_location'][0]['#default_value']['postal_code'] = $related_theater->field_location[0]['postal_code'];
    
  }

  // The following code can be used to make the titles on Org and Artist forms
	// Be autocomplete.
  if ($form_id == 'organization_node_form') {
    $form['title']['#autocomplete_path'] = 'nodereference/autocomplete/field_related_theater';
  }
  
  if ($form_id == 'artist_node_form') {
    $form['title']['#autocomplete_path'] = 'nodereference/autocomplete/field_artist';
  }
	
	// @TODO: change it to '#type' => 'textfield'
	// But then we have to update all the places that rely on this,
	// mostly newplay-jquery
  if ($form_id == 'event_node_form') {
    $form['custom_artist_reference'] = array(
      '#type' => 'text_textfield',
      '#title' => t('Generative Artist'),
      '#description' => t("This play is not already part of the New Play Map. What is the name of the Generative Artist responsible for this play?"),
      '#autocomplete_path' => 'nodereference/autocomplete/field_artist',
    );
  }
  
  if ($form_id == 'event_node_form') {
    $form['field_related_theater']['#required'] = TRUE;
    $form['field_related_play']['#required'] = TRUE;
	}
	
  if ($form_id == 'play_node_form') {
    $form['field_artist']['#required'] = TRUE;
	}
}


/**
 * Implementation of hook_widget_settings_fallback_alter().
 */
function newplay_reference_widget_settings_fallback_alter($data) {
  $data['fallback']['#options']['noderefcreate'] = t('Create node and reference');
}

/**
 * Implementation of hook_widget_fallback_alter().
 */
function newplay_reference_widget_fallback_alter($element, $field, $items, $delta) {    
  if ($field['widget']['fallback'] == 'noderefcreate') {
    $element = array(
      '#type' => 'nodereference_autocomplete',
      '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
      '#value_callback' => 'nodereference_autocomplete_value',
      '#element_validate' => array('nodereference_url_autocomplete_validate'),
      '#process' => array('noderefcreate_autocomplete_process'),
    );
  }
    
}
