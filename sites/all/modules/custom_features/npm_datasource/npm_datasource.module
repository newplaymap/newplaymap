<?php

include_once('npm_datasource.features.inc');

/**
 * Implementation of hook_menu()
 */
function npm_datasource_menu() {
  $items = array();
  $items['admin/content/update-mongo'] = array(
    'access arguments'  => array('administer site configuration'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('npm_datasource_admin_update_mongo_form'),
    'title'             => 'Update Mongo',
  );
  
  return $items;
}

function npm_datasource_admin_update_mongo_form() {
  $form['mongo_types'] = array(
    '#type' => 'checkboxes',
    '#options' => array(
      'event' => 'Events',
      'artist' => 'Artists (and Events)',
      'organization' => 'Organizations (and Events)',
      'play' => 'Plays (and Events)',
    ),
    '#required' => TRUE,
  );
  
  $form['update_mongo'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#submit' => array('npm_datasource_admin_update_mongo'),
  );
  
  // $form['update_mongo_other'] = array(
  //   '#type' => 'submit',
  //   '#value' => t('Update Everything else in Mongo'),
  //   '#submit' => array('npm_datasource_admin_update_mongo_other'),
  // );

  return $form;
}

function npm_datasource_admin_update_mongo($form, &$form_state) {
  // dsm($form['mongo_types']['#post']['mongo_types']);
  $event = (
    !empty($form['mongo_types']['#post']['mongo_types']['event']) ||
    !empty($form['mongo_types']['#post']['mongo_types']['artist']) ||
    !empty($form['mongo_types']['#post']['mongo_types']['organization']) ||
    !empty($form['mongo_types']['#post']['mongo_types']['play'])
  ) ? 'event' : '';

  $selected_options = $form['mongo_types']['#post']['mongo_types'];
  $opertations = array();

  // Always add the events call
  $operations[] = array('npm_datasource_admin_update_mongo_process', array($event));

  // If events was also checked, remove it from the list
  if ($selected_options['event']) {
    array_shift($selected_options);
  }

  // Add the other types that were checked to the list
  if (!empty($selected_options)) {
    foreach ($selected_options as $type) {
      $operations[] = array('npm_datasource_admin_update_mongo_process', array($type));
    }
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'npm_datasource_admin_update_mongo_finished',
    'title' => t('Update New Play Map Mongo Database'),
    'init_message' => t('Starting database update.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Mongo Update has encountered an error.'),
  );
  batch_set($batch);
}

function npm_datasource_admin_update_mongo_process($type, &$context) {
  if (empty($type)) {
    return;
  }
  $mongo_collection = $type . 's';
  include_once('../api/loaddata_functions.inc');
  include_once('../../authentication/newplaymap_authentication.php');
  connectMongo(false);
  global $m;
  global $mongo_database;

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query('SELECT COUNT(DISTINCT nid) FROM {node} WHERE type = "%s"', array($type)));
    $m->$mongo_database->$mongo_collection->drop();
  }

  $limit = 1;
  $result = db_query_range("SELECT nid, type, title FROM {node} WHERE nid > %d AND type = '%s' ORDER BY nid ASC", array($context['sandbox']['current_node'], $type), 0, $limit);

  while ($row = db_fetch_array($result)) {
    $domain = $_SERVER['HTTP_HOST'];
    $drupal_base_path = base_path();
    // $node = node_load($row['nid'], NULL, TRUE);

    switch ($row['type']) {
      case 'event':
        loadEvents($m, $mongo_database, $domain, $drupal_base_path, $row['nid']);
      break;
      case 'organization':
        loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, $row['nid']);
      break;
      case 'artist':
        loadArtists($m, $mongo_database, $domain, $drupal_base_path, $row['nid']);
      break;
      case 'play':
        loadPlays($m, $mongo_database, $domain, $drupal_base_path, $row['nid']);
      break;
    }

    // Store some result for post-processing in the finished callback.
    $context['results'][] = check_plain($row['title']) . ' (' . $row['type'] . ')';

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $row['nid'];
    $context['message'] = t('Now processing %type: %node', array('%node' => $row['title'], '%type' => $row['type']));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function npm_datasource_admin_update_mongo_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' processed.';
    $message .= theme('item_list', $results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
  }
  drupal_set_message($message);
}

/**
* Implementation of hook_action_info().
*/
function npm_datasource_action_info() {
  return array(
    'npm_datasource_update_mongo_action' => array(
      'description' => t('Updates the Mongo database with current drupal content'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array('any' => TRUE),
      ),
    'npm_datasource_delete_mongo_action' => array(
      'description' => t('Deletes records from the Mongo database'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array('any' => TRUE),
      ),
  );
}

/**
* Implementation of a Drupal action.
* Updates the Mongo database with current drupal content
*/
function npm_datasource_update_mongo_action(&$object, $context = array()) {
  npm_datasource_update_mongo($object, $context);
}

function npm_datasource_update_mongo(&$object, $context) {
  // dsm($object);
  // dsm($context);
  
  include_once('../api/loaddata_functions.inc');
  include_once('../../authentication/newplaymap_authentication.php');
  connectMongo(false);
  
  $domain = $_SERVER['HTTP_HOST'];
  $drupal_base_path = base_path();
  $id = $object->nid;
  
  switch ($context['hook']) {
    // Update a specific piece of content
    case 'nodeapi':
      switch ($object->type) {
        case 'artist':
          loadArtists($m, $mongo_database, $domain, $drupal_base_path, $id);
        break;
        case 'event':
          // Update this event
          loadEvents($m, $mongo_database, $domain, $drupal_base_path, $id);

          // Update the play in case a play was created using the add event form
          loadPlays($m, $mongo_database, $domain, $drupal_base_path, $object->field_related_play[0]['nid']);

          // Update the organization in case a play was created using the add event form
          // Update the partner organizations to help with related lists
          $all_organization_nids = $object->field_related_theater[0]['nid'];
          foreach ($object->field_partner_org as $partner_organization) {
            if (!empty($partner_organization['nid'])) {
              $all_organization_nids .= '+' . $partner_organization['nid'];
            }
          }
          loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, $all_organization_nids);

          // Add related artist from play
          $play = node_load($object->field_related_play[0]['nid']);
          loadArtists($m, $mongo_database, $domain, $drupal_base_path, $play->field_artist[0]['nid']);
        break;
        case 'organization':
          loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, $id);
        break;
        case 'play':
          loadPlays($m, $mongo_database, $domain, $drupal_base_path, $id);
          // Load all events for this play also
          loadEvents($m, $mongo_database, $domain, $drupal_base_path, 'all/' . $id);
        break;
      }
    break;
    // Update everything on cron
    case 'cron':
      global $m;
      global $mongo_database;

      // Events needs to run first because Artists uses it for related organization info
      loadEvents($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);

      loadArtists($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);
      loadPlays($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);
      loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);
    break;
  } 
}

/**
* Implementation of a Drupal action.
* Deletes records from the Mongo database
*/
function npm_datasource_delete_mongo_action(&$object, $context = array()) {
  npm_datasource_delete_mongo($object, $context);
}

function npm_datasource_delete_mongo(&$object, $context) {
  include_once('../api/loaddata_functions.inc');
  include_once('../../authentication/newplaymap_authentication.php');
  connectMongo(false);
  global $m;
  global $mongo_database;
  
  $id = $object->nid;
  $drupal_base_path = base_path();
  
  switch ($context['hook']) {
    // Update a specific piece of content
    case 'nodeapi':
      switch ($object->type) {
        case 'artist':
          // @TODO: Make a list of all the orgs that list this artist as related
          $organizations = $m->$mongo_database->organizations;
          $organizations_cursor = $organizations->find(array('properties.related_artists.path' => '/' . $object->path), array('id' => true));
          $organizations_to_update = array();
          foreach ($organizations_cursor as $organization_object) {
            $organizations_to_update[] = $organization_object['id'];
          }
          $organizations_to_update_string = implode('+', $organizations_to_update);
          
          // Delete the artist record
          deleteArtists($m, $mongo_database, $id);

          // @TODO: UPDATE the related orgs
          loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, $organizations_to_update_string);
          // @TODO: Figure out what other content to update
        break;
        case 'event':
          // Delete the event record
          deleteEvents($m, $mongo_database, $id);
          
          // @TODO: Figure out what other content to update
        break;
        case 'organization':
          // @TODO: Get the plays that list this org as related
          // @TODO: Get the artists that list this org as related

          // Delete the organization record
          deleteOrganizations($m, $mongo_database, $id);

          // @TODO: UPDATE the related orgs
          // @TODO: UPDATE the related artists
          // @TODO: Figure out what other content to update
        break;
        case 'play':
          // @TODO: Get the Organizations that list this play as related
          // Delete the play record
          deletePlays($m, $mongo_database, $id);
          
          // @TODO: UPDATE the related orgs
          // @TODO: Figure out what other content to update
        break;
      }

      // Redirect to the map
      $domain = $_SERVER['HTTP_HOST'];
      $drupal_base_path = base_path();
      $path_to_map = str_replace("/participate/", "", $drupal_base_path);
      drupal_goto('http://' . $domain . $path_to_map);
    break;
  }

}