<?php

include_once('npm_datasource.features.inc');

/**
* Implementation of hook_action_info().
*/
function npm_datasource_action_info() {
  return array(
    'npm_datasource_update_mongo_action' => array(
      'description' => t('Updates the Mongo database with current drupal content'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array('any' => TRUE),
      ),
    'npm_datasource_delete_mongo_action' => array(
      'description' => t('Deletes records from the Mongo database'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array('any' => TRUE),
      ),
  );
}

/**
* Implementation of a Drupal action.
* Updates the Mongo database with current drupal content
*/
function npm_datasource_update_mongo_action(&$object, $context = array()) {
  npm_datasource_update_mongo($object, $context);
}

function npm_datasource_update_mongo(&$object, $context) {
  // dsm($object);
  // dsm($context);
  
  include_once('../api/loaddata_functions.inc');
  include_once('../../authentication/newplaymap_authentication.php');
  connectMongo(false);
  
  $domain = $_SERVER['HTTP_HOST'];
  $drupal_base_path = base_path();
  $id = $object->nid;
  
  switch ($context['hook']) {
    // Update a specific piece of content
    case 'nodeapi':
      switch ($object->type) {
        case 'artist':
          loadArtists($m, $mongo_database, $domain, $drupal_base_path, $id);
        break;
        case 'event':
          // Update this event
          loadEvents($m, $mongo_database, $domain, $drupal_base_path, $id);

          // Update the play in case a play was created using the add event form
          loadPlays($m, $mongo_database, $domain, $drupal_base_path, $object->field_related_play[0]['nid']);

          // Update the organization in case a play was created using the add event form
          // Update the partner organizations to help with related lists
          $all_organization_nids = $object->field_related_theater[0]['nid'];
          foreach ($object->field_partner_org as $partner_organization) {
            if (!empty($partner_organization['nid'])) {
              $all_organization_nids .= '+' . $partner_organization['nid'];
            }
          }
          loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, $all_organization_nids);

          // Add related artist from play
          $play = node_load($object->field_related_play[0]['nid']);
          loadArtists($m, $mongo_database, $domain, $drupal_base_path, $play->field_artist[0]['nid']);
        break;
        case 'organization':
          loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, $id);
        break;
        case 'play':
          loadPlays($m, $mongo_database, $domain, $drupal_base_path, $id);
          // Load all events for this play also
          loadEvents($m, $mongo_database, $domain, $drupal_base_path, 'all/' . $id);
        break;
      }
    break;
    // Update everything on cron
    case 'cron':
      global $m;
      global $mongo_database;

      // Events needs to run first because Artists uses it for related organization info
      loadEvents($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);

      loadArtists($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);
      loadPlays($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);
      loadOrganizations($m, $mongo_database, $domain, $drupal_base_path, FALSE, TRUE);
    break;
  } 
}

/**
* Implementation of a Drupal action.
* Deletes records from the Mongo database
*/
function npm_datasource_delete_mongo_action(&$object, $context = array()) {
  npm_datasource_delete_mongo($object, $context);
}

function npm_datasource_delete_mongo(&$object, $context) {
  include_once('../api/loaddata_functions.inc');
  include_once('../../authentication/newplaymap_authentication.php');
  connectMongo(false);
  
  $id = $object->nid;
  
  switch ($context['hook']) {
    // Update a specific piece of content
    case 'nodeapi':
      switch ($object->type) {
        case 'artist':
          // Delete the artist record
          // deleteArtists($m, $mongo_database, $id);
          
          // @TODO: Figure out what other content to update
        break;
        case 'event':
          // Delete the event record
          deleteEvents($m, $mongo_database, $id);
          
          // @TODO: Figure out what other content to update
        break;
        case 'organization':
          // Delete the organization record
          // deleteOrganizations($m, $mongo_database, $id);
          
          // @TODO: Figure out what other content to update
        break;
        case 'play':
          // Delete the play record
          // deletePlays($m, $mongo_database, $id);
          
          // @TODO: Figure out what other content to update
        break;
      }

      // Redirect to the map
      $domain = $_SERVER['HTTP_HOST'];
      $drupal_base_path = base_path();
      $path_to_map = str_replace("/participate/", "", $drupal_base_path);
      drupal_goto('http://' . $domain . $path_to_map);
    break;
  } 
}